#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('server:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '8080');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

var io = require('socket.io')(server);


server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    console.log("listenning on port ", port);
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

 // Socket server
var roomNumber = 0;
var rooms = [
  {
    id:0,
    turn:0,
    P1ID:null,
    P1name:null,
    P2ID:null,
    P2name:null,
  }
]

io.on('connection', function(socket){  
  console.log('Player connected',socket.id); // Kiểm tra có người kết nói

  // Tham gia vào game
  socket.on('joinGame', function(data){

    if(rooms[roomNumber].P1ID === null)
    {
      rooms[roomNumber].P1ID = data.id;

      socket.join(`room-${roomNumber}`);
      socket.emit('newGame', { name: data.name, room: `room-${roomNumber}` });
    }
    else if( rooms[roomNumber].P2ID === null)
    {
      rooms[roomNumber].P2ID = data.id;
      // Kiểm tra xem phòng có bị giành mất không

      socket.join(`room-${roomNumber}`);
      socket.broadcast.to(`room-${roomNumber}`).emit('player1', {P1: rooms[roomNumber].P1ID, P1name: rooms[roomNumber].P1name,P2: rooms[roomNumber].P2ID, P2name: rooms[roomNumber].P2name, room: `room-${roomNumber}`});
      socket.to(`room-${roomNumber}`).emit('player2', {P1: rooms[roomNumber].P1ID, P1name: rooms[roomNumber].P1name,P2: rooms[roomNumber].P2ID, P2name: rooms[roomNumber].P2name, room: `room-${roomNumber}` })

    }
    else
    {
      roomNumber++;
      rooms.push(
        {
          id:roomNumber,
          turn:0,
          P1ID:null,
          P1name:null,
          P2ID:null,
          P2name:null,
        }
      );
      rooms[roomNumber].P1ID = data.id;

      
      socket.join(`room-${roomNumber}`);
      socket.emit('newGame', { name: data.name, room: `room-${roomNumber}` });
    }

  });

  socket.on('playTurn', function(data){
    if(rooms[roomNumber].P1ID === data.id && turn % 2 === 0)
    {
      socket.broadcast.to(`room-${roomNumber}`).emit('turnPlayed', {
        pos: data.pos,
        room: `room-${roomNumber}`,
      });
      rooms[roomNumber].turn++;
    }
    else if(rooms[roomNumber].P2ID === data.id && turn % 2 !== 0)
    {
      socket.broadcast.to(`room-${roomNumber}`).emit('turnPlayed', {
        tile: data.pos,
        room: `room-${roomNumber}`,
      });
      rooms[roomNumber].turn++;
    }
    else
    {
      // do nothing
    }    
  });

  socket.on('gameEnded', function(data){    
    socket.broadcast.to(data.room).emit('gameEnd', data);
  });
});



function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
